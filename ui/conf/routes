# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static resources from the /public folder to the /assets URL path

# Javascript Router
GET		/assets/javascripts/routes							controllers.Application.jsRoutes()

GET     /assets/*file               	controllers.Assets.at(path="/public", file)
GET     /webjars/*file                  controllers.WebJarAssets.at(file)

# Login
GET		/repo/:repositoryId/login							controllers.Application.login(repositoryId)
GET		/repo/:repositoryId/authenticate					controllers.Application.authenticate(repositoryId)
GET		/repo/:repositoryId/logout							controllers.Application.logout(repositoryId)

# Home page
GET     /repo/:repositoryId/                           		controllers.Node.index(repositoryId:String)

# CMIS Rest API
GET     /repo/:repositoryId/objects               			controllers.Node.showChildren(repositoryId:String, id="/")
GET     /repo/:repositoryId/objects/search               	controllers.Node.search(repositoryId:String, term:String ?= "")
GET     /repo/:repositoryId/objects/new               		controllers.Node.showBlank(repositoryId:String)
POST	/repo/:repositoryId/objects/create               	controllers.Node.create(repositoryId:String)
GET		/repo/:repositoryId/objects/js/:objectId/ace/:principalId	controllers.Node.jsGetAce(repositoryId:String, objectId:String, principalId:String)
POST    /repo/:repositoryId/objects/drag-and-drop          controllers.Node.dragAndDrop(repositoryId:String, action:String ?= "")
GET     /repo/:repositoryId/objects/:id               		controllers.Node.showDetail(repositoryId:String, id:String, activatePreviewTab:Boolean ?= false)
GET     /repo/:repositoryId/objects/:id/property           controllers.Node.showProperty(repositoryId:String, id:String)
GET     /repo/:repositoryId/objects/:id/download           controllers.Node.download(repositoryId:String, id:String)
GET     /repo/:repositoryId/objects/:id/file               controllers.Node.showFile(repositoryId:String, id:String)
GET     /repo/:repositoryId/objects/:id/preview            controllers.Node.showPreview(repositoryId:String, id:String)
GET     /repo/:repositoryId/objects/:id/download-preview   controllers.Node.downloadPreview(repositoryId:String, id:String)
GET     /repo/:repositoryId/objects/:id/version            controllers.Node.showVersion(repositoryId:String, id:String)
GET		/repo/:repositoryId/objects/:id/permission			controllers.Node.showPermission(repositoryId:String, id:String)
GET     /repo/:repositoryId/objects/:id/children           controllers.Node.showChildren(repositoryId:String, id:String)
POST    /repo/:repositoryId/objects/:id/update            	controllers.Node.update(repositoryId:String, id:String)
POST    /repo/:repositoryId/objects/:id/update-permission  controllers.Node.updatePermission(repositoryId:String, id:String)
POST    /repo/:repositoryId/objects/:id/upload            	controllers.Node.upload(repositoryId:String, id:String)
POST    /repo/:repositoryId/objects/:id/checkout          	controllers.Node.checkOut(repositoryId:String, id:String)
POST    /repo/:repositoryId/objects/:id/checkin           	controllers.Node.checkIn(repositoryId:String, id:String)
POST    /repo/:repositoryId/objects/:id/cancel-checkout   	controllers.Node.cancelCheckOut(repositoryId:String, id:String)
POST 	/repo/:repositoryId/objects/:id/delete				controllers.Node.delete(repositoryId:String, id:String)
GET		/repo/:repositoryId/path/children					controllers.Node.showChildrenByPath(repositoryId:String, path:String ?= "/")

# User API
GET     /repo/:repositoryId/users               			controllers.User.index(repositoryId:String)
GET		/repo/:repositoryId/users/search					controllers.User.search(repositoryId:String, term: String ?= "")
GET     /repo/:repositoryId/users/new               		controllers.User.showBlank(repositoryId:String)
POST	/repo/:repositoryId/users/create					controllers.User.create(repositoryId:String)
GET		/repo/:repositoryId/users/:id						controllers.User.showDetail(repositoryId:String, id:String)
POST	/repo/:repositoryId/users/:id/update				controllers.User.update(repositoryId:String, id:String)
POST	/repo/:repositoryId/users/:id/delete				controllers.User.delete(repositoryId:String, id:String)
GET     /repo/:repositoryId/:repositoryId/users/:id/favorites            controllers.User.showFavorites(repositoryId: String, id:String)
PUT		/repo/:repositoryId/users/:userId/favorites/:objectId			controllers.User.toggleFavorite(repositoryId:String, userId:String, objectId:String)

# Group API
GET		/repo/:repositoryId/groups							controllers.Group.index(repositoryId:String)
GET		/repo/:repositoryId/groups/search					controllers.Group.search(repositoryId:String, term:String ?= "")
GET		/repo/:repositoryId/groups/new						controllers.Group.showBlank(repositoryId:String)
POST	/repo/:repositoryId/groups/create					controllers.Group.create(repositoryId:String)
GET		/repo/:repositoryId/groups/:id						controllers.Group.showDetail(repositoryId:String, id:String)
POST	/repo/:repositoryId/groups/:id/update				controllers.Group.update(repositoryId:String, id:String)
POST	/repo/:repositoryId/groups/:id/delete				controllers.Group.delete(repositoryId:String, id:String)

# Principal API
GET		/repo/:repositoryId/principals/search				controllers.Principal.search(repositoryId:String, term:String ?= "", groupId:String ?= "")

# Search engine API
GET		/repo/:repositoryId/search-engine					controllers.SearchEngine.index(repositoryId:String)		
GET		/repo/:repositoryId/search-engine/init				controllers.SearchEngine.init(repositoryId:String)
GET		/repo/:repositoryId/search-engine/reindex			controllers.SearchEngine.reindex(repositoryId:String)

# ObjectType API
GET		/repo/:repositoryId/types							controllers.Type.index(repositoryId:String)
GET		/repo/:repositoryId/types/:id/download				controllers.Type.download(repositoryId:String, id:String)
GET		/repo/:repositoryId/types/new						controllers.Type.showBlank(repositoryId:String)
POST	/repo/:repositoryId/types/create					controllers.Type.create(repositoryId:String)
GET		/repo/:repositoryId/types/edit						controllers.Type.edit(repositoryId:String)
POST	/repo/:repositoryId/types/update					controllers.Type.update(repositoryId:String)
POST	/repo/:repositoryId/types/:id/delete				controllers.Type.delete(repositoryId:String, id:String)

# Javascript scala template API
GET		/jstemplate/duplicateNameCheck.js	controllers.JsTemplate.duplicateNameCheck(repositoryId:String)
